// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum Environment {
  production,
  development,
}

enum ErrorCode {
  invalidRequest,
  genericError,
}

enum FinvuStatus {
  success,
  failure,
}

class InitConfig {
  InitConfig({
    this.appId,
    this.requestId,
  });

  String? appId;

  String? requestId;

  List<Object?> _toList() {
    return <Object?>[
      appId,
      requestId,
    ];
  }

  Object encode() {
    return _toList();  }

  static InitConfig decode(Object result) {
    result as List<Object?>;
    return InitConfig(
      appId: result[0] as String?,
      requestId: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! InitConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FinvuAuthSuccessResponse {
  FinvuAuthSuccessResponse({
    this.token,
    this.authType,
    this.extra,
  });

  String? token;

  String? authType;

  Map<String, Object?>? extra;

  List<Object?> _toList() {
    return <Object?>[
      token,
      authType,
      extra,
    ];
  }

  Object encode() {
    return _toList();  }

  static FinvuAuthSuccessResponse decode(Object result) {
    result as List<Object?>;
    return FinvuAuthSuccessResponse(
      token: result[0] as String?,
      authType: result[1] as String?,
      extra: (result[2] as Map<Object?, Object?>?)?.cast<String, Object?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FinvuAuthSuccessResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FinvuAuthFailureError {
  FinvuAuthFailureError({
    this.errorCode,
    this.errorMessage,
    this.details,
  });

  String? errorCode;

  String? errorMessage;

  Map<String, Object?>? details;

  List<Object?> _toList() {
    return <Object?>[
      errorCode,
      errorMessage,
      details,
    ];
  }

  Object encode() {
    return _toList();  }

  static FinvuAuthFailureError decode(Object result) {
    result as List<Object?>;
    return FinvuAuthFailureError(
      errorCode: result[0] as String?,
      errorMessage: result[1] as String?,
      details: (result[2] as Map<Object?, Object?>?)?.cast<String, Object?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FinvuAuthFailureError || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FinvuAuthResult {
  FinvuAuthResult({
    this.status,
    this.data,
    this.error,
  });

  /// Discriminator: SUCCESS or FAILURE
  FinvuStatus? status;

  /// Present when status == SUCCESS
  FinvuAuthSuccessResponse? data;

  /// Present when status == FAILURE
  FinvuAuthFailureError? error;

  List<Object?> _toList() {
    return <Object?>[
      status,
      data,
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static FinvuAuthResult decode(Object result) {
    result as List<Object?>;
    return FinvuAuthResult(
      status: result[0] as FinvuStatus?,
      data: result[1] as FinvuAuthSuccessResponse?,
      error: result[2] as FinvuAuthFailureError?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FinvuAuthResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class VerifyOtpReq {
  VerifyOtpReq({
    this.phoneNumber,
    this.otp,
  });

  String? phoneNumber;

  String? otp;

  List<Object?> _toList() {
    return <Object?>[
      phoneNumber,
      otp,
    ];
  }

  Object encode() {
    return _toList();  }

  static VerifyOtpReq decode(Object result) {
    result as List<Object?>;
    return VerifyOtpReq(
      phoneNumber: result[0] as String?,
      otp: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! VerifyOtpReq || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Environment) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is ErrorCode) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is FinvuStatus) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is InitConfig) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is FinvuAuthSuccessResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is FinvuAuthFailureError) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is FinvuAuthResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is VerifyOtpReq) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Environment.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ErrorCode.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FinvuStatus.values[value];
      case 132: 
        return InitConfig.decode(readValue(buffer)!);
      case 133: 
        return FinvuAuthSuccessResponse.decode(readValue(buffer)!);
      case 134: 
        return FinvuAuthFailureError.decode(readValue(buffer)!);
      case 135: 
        return FinvuAuthResult.decode(readValue(buffer)!);
      case 136: 
        return VerifyOtpReq.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FinvuHostApi {
  /// Constructor for [FinvuHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FinvuHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setUp(Environment env) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.setUp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[env]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FinvuAuthResult> initAuth(InitConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.initAuth$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[config]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FinvuAuthResult?)!;
    }
  }

  Future<FinvuAuthResult> startAuth(String phoneNumber) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.startAuth$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[phoneNumber]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FinvuAuthResult?)!;
    }
  }

  Future<FinvuAuthResult> verifyOtp(VerifyOtpReq request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.verifyOtp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FinvuAuthResult?)!;
    }
  }

  Future<void> cleanupAll() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.cleanupAll$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
