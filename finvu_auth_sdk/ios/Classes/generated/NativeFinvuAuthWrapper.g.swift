// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsNativeFinvuAuthWrapper(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsNativeFinvuAuthWrapper(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsNativeFinvuAuthWrapper(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashNativeFinvuAuthWrapper(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashNativeFinvuAuthWrapper(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashNativeFinvuAuthWrapper(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum Environment: Int {
  case production = 0
  case development = 1
}

enum ErrorCode: Int {
  case invalidRequest = 0
  case genericError = 1
}

enum FinvuStatus: Int {
  case success = 0
  case failure = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitConfig: Hashable {
  var appId: String? = nil
  var requestId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> InitConfig? {
    let appId: String? = nilOrValue(pigeonVar_list[0])
    let requestId: String? = nilOrValue(pigeonVar_list[1])

    return InitConfig(
      appId: appId,
      requestId: requestId
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      requestId,
    ]
  }
  static func == (lhs: InitConfig, rhs: InitConfig) -> Bool {
    return deepEqualsNativeFinvuAuthWrapper(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeFinvuAuthWrapper(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FinvuAuthSuccessResponse: Hashable {
  var token: String? = nil
  var authType: String? = nil
  var extra: [String: Any?]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FinvuAuthSuccessResponse? {
    let token: String? = nilOrValue(pigeonVar_list[0])
    let authType: String? = nilOrValue(pigeonVar_list[1])
    let extra: [String: Any?]? = nilOrValue(pigeonVar_list[2])

    return FinvuAuthSuccessResponse(
      token: token,
      authType: authType,
      extra: extra
    )
  }
  func toList() -> [Any?] {
    return [
      token,
      authType,
      extra,
    ]
  }
  static func == (lhs: FinvuAuthSuccessResponse, rhs: FinvuAuthSuccessResponse) -> Bool {
    return deepEqualsNativeFinvuAuthWrapper(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeFinvuAuthWrapper(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FinvuAuthFailureError: Hashable {
  var errorCode: String? = nil
  var errorMessage: String? = nil
  var details: [String: Any?]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FinvuAuthFailureError? {
    let errorCode: String? = nilOrValue(pigeonVar_list[0])
    let errorMessage: String? = nilOrValue(pigeonVar_list[1])
    let details: [String: Any?]? = nilOrValue(pigeonVar_list[2])

    return FinvuAuthFailureError(
      errorCode: errorCode,
      errorMessage: errorMessage,
      details: details
    )
  }
  func toList() -> [Any?] {
    return [
      errorCode,
      errorMessage,
      details,
    ]
  }
  static func == (lhs: FinvuAuthFailureError, rhs: FinvuAuthFailureError) -> Bool {
    return deepEqualsNativeFinvuAuthWrapper(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeFinvuAuthWrapper(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FinvuAuthResult: Hashable {
  /// Discriminator: SUCCESS or FAILURE
  var status: FinvuStatus? = nil
  /// Present when status == SUCCESS
  var data: FinvuAuthSuccessResponse? = nil
  /// Present when status == FAILURE
  var error: FinvuAuthFailureError? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FinvuAuthResult? {
    let status: FinvuStatus? = nilOrValue(pigeonVar_list[0])
    let data: FinvuAuthSuccessResponse? = nilOrValue(pigeonVar_list[1])
    let error: FinvuAuthFailureError? = nilOrValue(pigeonVar_list[2])

    return FinvuAuthResult(
      status: status,
      data: data,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      data,
      error,
    ]
  }
  static func == (lhs: FinvuAuthResult, rhs: FinvuAuthResult) -> Bool {
    return deepEqualsNativeFinvuAuthWrapper(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeFinvuAuthWrapper(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VerifyOtpReq: Hashable {
  var phoneNumber: String? = nil
  var otp: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> VerifyOtpReq? {
    let phoneNumber: String? = nilOrValue(pigeonVar_list[0])
    let otp: String? = nilOrValue(pigeonVar_list[1])

    return VerifyOtpReq(
      phoneNumber: phoneNumber,
      otp: otp
    )
  }
  func toList() -> [Any?] {
    return [
      phoneNumber,
      otp,
    ]
  }
  static func == (lhs: VerifyOtpReq, rhs: VerifyOtpReq) -> Bool {
    return deepEqualsNativeFinvuAuthWrapper(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativeFinvuAuthWrapper(value: toList(), hasher: &hasher)
  }
}

private class NativeFinvuAuthWrapperPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Environment(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ErrorCode(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FinvuStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return InitConfig.fromList(self.readValue() as! [Any?])
    case 133:
      return FinvuAuthSuccessResponse.fromList(self.readValue() as! [Any?])
    case 134:
      return FinvuAuthFailureError.fromList(self.readValue() as! [Any?])
    case 135:
      return FinvuAuthResult.fromList(self.readValue() as! [Any?])
    case 136:
      return VerifyOtpReq.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class NativeFinvuAuthWrapperPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Environment {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ErrorCode {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? FinvuStatus {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? InitConfig {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? FinvuAuthSuccessResponse {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? FinvuAuthFailureError {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? FinvuAuthResult {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? VerifyOtpReq {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeFinvuAuthWrapperPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeFinvuAuthWrapperPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeFinvuAuthWrapperPigeonCodecWriter(data: data)
  }
}

class NativeFinvuAuthWrapperPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NativeFinvuAuthWrapperPigeonCodec(readerWriter: NativeFinvuAuthWrapperPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FinvuHostApi {
  func setUp(env: Environment) throws
  func initAuth(config: InitConfig, completion: @escaping (Result<FinvuAuthResult, Error>) -> Void)
  func startAuth(phoneNumber: String, completion: @escaping (Result<FinvuAuthResult, Error>) -> Void)
  func verifyOtp(request: VerifyOtpReq, completion: @escaping (Result<FinvuAuthResult, Error>) -> Void)
  func cleanupAll() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FinvuHostApiSetup {
  static var codec: FlutterStandardMessageCodec { NativeFinvuAuthWrapperPigeonCodec.shared }
  /// Sets up an instance of `FinvuHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FinvuHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setUpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.setUp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUpChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let envArg = args[0] as! Environment
        do {
          try api.setUp(env: envArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUpChannel.setMessageHandler(nil)
    }
    let initAuthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.initAuth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initAuthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! InitConfig
        api.initAuth(config: configArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initAuthChannel.setMessageHandler(nil)
    }
    let startAuthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.startAuth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAuthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let phoneNumberArg = args[0] as! String
        api.startAuth(phoneNumber: phoneNumberArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startAuthChannel.setMessageHandler(nil)
    }
    let verifyOtpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.verifyOtp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      verifyOtpChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! VerifyOtpReq
        api.verifyOtp(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      verifyOtpChannel.setMessageHandler(nil)
    }
    let cleanupAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.cleanupAll\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cleanupAllChannel.setMessageHandler { _, reply in
        do {
          try api.cleanupAll()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cleanupAllChannel.setMessageHandler(nil)
    }
  }
}
