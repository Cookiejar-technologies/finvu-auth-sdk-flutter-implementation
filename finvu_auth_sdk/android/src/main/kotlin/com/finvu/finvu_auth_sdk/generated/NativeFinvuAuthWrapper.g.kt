// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.finvu.finvu_auth_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativeFinvuAuthWrapperPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is NativeFinvuAuthError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class NativeFinvuAuthError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Environment(val raw: Int) {
  PRODUCTION(0),
  DEVELOPMENT(1);

  companion object {
    fun ofRaw(raw: Int): Environment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ErrorCode(val raw: Int) {
  INVALID_REQUEST(0),
  GENERIC_ERROR(1);

  companion object {
    fun ofRaw(raw: Int): ErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FinvuStatus(val raw: Int) {
  SUCCESS(0),
  FAILURE(1);

  companion object {
    fun ofRaw(raw: Int): FinvuStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitConfig (
  val appId: String? = null,
  val requestId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): InitConfig {
      val appId = pigeonVar_list[0] as String?
      val requestId = pigeonVar_list[1] as String?
      return InitConfig(appId, requestId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appId,
      requestId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is InitConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeFinvuAuthWrapperPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FinvuAuthSuccessResponse (
  val token: String? = null,
  val authType: String? = null,
  val extra: Map<String, Any?>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FinvuAuthSuccessResponse {
      val token = pigeonVar_list[0] as String?
      val authType = pigeonVar_list[1] as String?
      val extra = pigeonVar_list[2] as Map<String, Any?>?
      return FinvuAuthSuccessResponse(token, authType, extra)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      token,
      authType,
      extra,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is FinvuAuthSuccessResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeFinvuAuthWrapperPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FinvuAuthFailureError (
  val errorCode: String? = null,
  val errorMessage: String? = null,
  val details: Map<String, Any?>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FinvuAuthFailureError {
      val errorCode = pigeonVar_list[0] as String?
      val errorMessage = pigeonVar_list[1] as String?
      val details = pigeonVar_list[2] as Map<String, Any?>?
      return FinvuAuthFailureError(errorCode, errorMessage, details)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorCode,
      errorMessage,
      details,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is FinvuAuthFailureError) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeFinvuAuthWrapperPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FinvuAuthResult (
  /** Discriminator: SUCCESS or FAILURE */
  val status: FinvuStatus? = null,
  /** Present when status == SUCCESS */
  val data: FinvuAuthSuccessResponse? = null,
  /** Present when status == FAILURE */
  val error: FinvuAuthFailureError? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FinvuAuthResult {
      val status = pigeonVar_list[0] as FinvuStatus?
      val data = pigeonVar_list[1] as FinvuAuthSuccessResponse?
      val error = pigeonVar_list[2] as FinvuAuthFailureError?
      return FinvuAuthResult(status, data, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      data,
      error,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is FinvuAuthResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeFinvuAuthWrapperPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VerifyOtpReq (
  val phoneNumber: String? = null,
  val otp: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VerifyOtpReq {
      val phoneNumber = pigeonVar_list[0] as String?
      val otp = pigeonVar_list[1] as String?
      return VerifyOtpReq(phoneNumber, otp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      phoneNumber,
      otp,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is VerifyOtpReq) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeFinvuAuthWrapperPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class NativeFinvuAuthWrapperPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Environment.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ErrorCode.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FinvuStatus.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitConfig.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FinvuAuthSuccessResponse.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FinvuAuthFailureError.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FinvuAuthResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VerifyOtpReq.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Environment -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ErrorCode -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is FinvuStatus -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is InitConfig -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is FinvuAuthSuccessResponse -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is FinvuAuthFailureError -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is FinvuAuthResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is VerifyOtpReq -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FinvuHostApi {
  fun setUp(env: Environment)
  fun initAuth(config: InitConfig, callback: (Result<FinvuAuthResult>) -> Unit)
  fun startAuth(phoneNumber: String, callback: (Result<FinvuAuthResult>) -> Unit)
  fun verifyOtp(request: VerifyOtpReq, callback: (Result<FinvuAuthResult>) -> Unit)
  fun cleanupAll()

  companion object {
    /** The codec used by FinvuHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeFinvuAuthWrapperPigeonCodec()
    }
    /** Sets up an instance of `FinvuHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FinvuHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.setUp$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val envArg = args[0] as Environment
            val wrapped: List<Any?> = try {
              api.setUp(envArg)
              listOf(null)
            } catch (exception: Throwable) {
              NativeFinvuAuthWrapperPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.initAuth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as InitConfig
            api.initAuth(configArg) { result: Result<FinvuAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.startAuth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val phoneNumberArg = args[0] as String
            api.startAuth(phoneNumberArg) { result: Result<FinvuAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.verifyOtp$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as VerifyOtpReq
            api.verifyOtp(requestArg) { result: Result<FinvuAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeFinvuAuthWrapperPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_auth_sdk.FinvuHostApi.cleanupAll$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cleanupAll()
              listOf(null)
            } catch (exception: Throwable) {
              NativeFinvuAuthWrapperPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
